# for runn 'python test-main.py -v'

import unittest
import simplemma

import sys 
sys.path.append('..')

from ml import preprocess_text as pt
from ml.src.ua_stemmer.UAStemmer import UAStemmer 
from ml.src.translit_convertor import ru_translit as rutrans
from ml.src.translit_convertor import special_characters as spec_char

class TestPreprocessTextMethods(unittest.TestCase):

    def test_skip_emails(self):
        self.assertEqual(pt.skip_emails('test@test.com 123'), ' 123')
        self.assertEqual(pt.skip_emails('123 some.name@email.mt.gov 123'), '123  123')
        self.assertEqual(pt.skip_emails('123 @mention 123'), '123 @mention 123')

    def test_skip_custom_character(self):
        test_tokens_1 = ['¬´', '¬ª', '–º–∞', '—É–≤–∞–≥', '–±—ñ–ª—å—à—ñ—Å—Ç']
        self.assertEqual(pt.skip_custom_character(test_tokens_1), ['–º–∞', '—É–≤–∞–≥', '–±—ñ–ª—å—à—ñ—Å—Ç'])
        test_tokens_2 = ['[', '–≤–µ–±–∫–∞–¥–µ–º', ']', '—Ä–µ–∞–ª—å–Ω', '–ø—Ä–æ–µ–∫—Ç']
        self.assertEqual(pt.skip_custom_character(test_tokens_2), ['–≤–µ–±–∫–∞–¥–µ–º', '—Ä–µ–∞–ª—å–Ω', '–ø—Ä–æ–µ–∫—Ç'])

    def test_skip_double_letters(self):
        test_tokens_1 = ['—è–∫–æ–±', '–ø–æ—Ä–∞–∂–µ–Ω–Ω—ã', '–ø–∫—Ä', '–Ω–Ω–Ω–Ω–Ω–µ–ø—Ç—É–Ω']
        self.assertEqual(pt.skip_double_letters(test_tokens_1), ['—è–∫–æ–±', '–ø–æ—Ä–∞–∂–µ–Ω—ã', '–ø–∫—Ä', '–Ω–µ–ø—Ç—É–Ω'])
        test_tokens_2 = ['—É—É—É—Ä–∞–∞–∞', '—Ç–µ–ø–µ—Ä—å', '—Ö–æ—Ä–æ—à–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ']
        self.assertEqual(pt.skip_double_letters(test_tokens_2), ['—É—Ä–∞', '—Ç–µ–ø–µ—Ä—å', '—Ö–æ—Ä–æ—à–æ'])


    def test_skip_mentions(self):
        self.assertEqual(pt.skip_mentions('@test 123'), ' 123')
        self.assertEqual(pt.skip_mentions('123 @mention 123'), '123  123')
        self.assertEqual(pt.skip_mentions('@PitonWarZ_bot –£ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞'), ' –£ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞')

    def test_skip_stopwords(self):
        test_tokens_1 = ['–∞', '—Ç–∞–º', '–±—É–ª–∏', '—ñ', '—ñ–Ω—à–∏—Ö']
        self.assertEqual(pt.skip_stopwords(test_tokens_1), ['–∞', '—Ç–∞–º', '—ñ'])
        test_tokens_2 = ['—Ç–∞–∫–æ–∂', '—Ö–æ–ª–æ–¥–Ω–æ', '–∞–ª–µ', '–≤—Å–µ', '–≤—Å–µ—Ä–µ–¥–∏–Ω—ñ', '–¥–æ–±—Ä–µ']
        self.assertEqual(pt.skip_stopwords(test_tokens_2), ['—Ö–æ–ª–æ–¥–Ω–æ', '–¥–æ–±—Ä–µ'])
        test_tokens_3 = ['–∞–±–∏', '—è', '–ø–æ–±–∞—á–∏–≤', '—Ü–µ', '—è', '–±–∏', '–∑–¥–∏–≤—É–≤–∞–≤—Å—è']
        self.assertEqual(pt.skip_stopwords(test_tokens_3), ['–∞–±–∏', '—è', '–ø–æ–±–∞—á–∏–≤', '—Ü–µ', '—è', '–∑–¥–∏–≤—É–≤–∞–≤—Å—è'])

    def test_only_charters(self):
        self.assertEqual(pt.only_charters(u'–∞–±–∏ —è –ø–æ–±–∞—á–∏–≤ —Ü–µ, —è –±–∏ –∑–¥–∏–≤—É–≤–∞–≤—Å—è!!!  12  3 test@ üòù'), '–∞–±–∏ —è –ø–æ–±–∞—á–∏–≤ —Ü–µ —è –±–∏ –∑–¥–∏–≤—É–≤–∞–≤—Å—è test')

    def test_skip_urls(self):
        self.assertEqual(pt.skip_urls('https://test.com/go-here please visit my site'), 'please visit my site')
        self.assertEqual(pt.skip_urls('—Ç—É—Ç —î –±–∞–≥–∞—Ç–æ —Ü—ñ–∫–∞–≤–æ–≥–æ https://somedomain.gov.com/go-here'), '—Ç—É—Ç —î –±–∞–≥–∞—Ç–æ —Ü—ñ–∫–∞–≤–æ–≥–æ')

    def test_lemma(self):
        langdata = simplemma.load_data('uk')
        # –ø—Ä—è–º –∑–∞ –Ω–∏–º–∏ –ª–µ—Ç–∏—Ç—å –ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ –∫—É–ª—å–∫–∞
        # res: "–ø—Ä—è–º –∑–∞ –≤–æ–Ω–∏ –ª–µ—Ç—ñ—Ç–∏ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏–π –∫—É–ª—å–æ–∫"
        w1 = '–ø—Ä—è–º'
        self.assertEqual(simplemma.lemmatize(w1, langdata), '–ø—Ä—è–º')
        w2 = '–∑–∞'
        self.assertEqual(simplemma.lemmatize(w2, langdata), '–∑–∞')
        w3 = '–Ω–∏–º–∏'
        self.assertEqual(simplemma.lemmatize(w3, langdata), '–≤–æ–Ω–∏')
        w4 = '–ª–µ—Ç–∏—Ç—å'
        self.assertEqual(simplemma.lemmatize(w4, langdata), '–ª–µ—Ç—ñ—Ç–∏')
        w5 = '–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞'
        self.assertEqual(simplemma.lemmatize(w5, langdata), '–ø–æ–≤—ñ—Ç—Ä—è–Ω–∏–π')
        w6 = '–∫—É–ª—å–∫–∞'
        self.assertEqual(simplemma.lemmatize(w6, langdata), '–∫—É–ª—å–æ–∫')

    def test_setemmer(self):
        stemmer = UAStemmer()
        # –ø—Ä—è–º –∑–∞ –≤–æ–Ω–∏ –ª–µ—Ç—ñ—Ç–∏ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏–π –∫—É–ª—å–æ–∫
        # res: "–ø—Ä—è–º –∑–∞ –≤–æ–Ω –ª–µ—Ç—ñ—Ç –ø–æ–≤—ñ—Ç—Ä—è–Ω –∫—É–ª—å–æ–∫"
        w1 = '–ø—Ä—è–º'
        self.assertEqual(stemmer.stem_word(w1), '–ø—Ä—è–º')
        w2 = '–∑–∞'
        self.assertEqual(stemmer.stem_word(w2), '–∑–∞')
        w3 = '–≤–æ–Ω–∏'
        self.assertEqual(stemmer.stem_word(w3), '–≤–æ–Ω')
        w4 = '–ª–µ—Ç—ñ—Ç–∏'
        self.assertEqual(stemmer.stem_word(w4), '–ª–µ—Ç—ñ—Ç')
        w5 = '–ø–æ–≤—ñ—Ç—Ä—è–Ω–∏–π'
        self.assertEqual(stemmer.stem_word(w5), '–ø–æ–≤—ñ—Ç—Ä—è–Ω')
        w6 = '–∫—É–ª—å–æ–∫'
        self.assertEqual(stemmer.stem_word(w6), '–∫—É–ª—å–æ–∫')

    def test_ru_translit(self):
        s1 = '–í–∑—Ä—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –º–∏–Ω–∏ —è–¥–µ—Ä–∫–∞'
        self.assertEqual(rutrans.ru_to_cyrillic(s1), 'Vzryvaetsja kak mini jaderka')
        # reverse
        s2 = 'Vzryvaetsja kak mini jaderka'
        self.assertEqual(rutrans.cyrillic_to_ru(s2), '–í–∑—Ä—ã–≤–∞–µ—Ü—è –∫–∞–∫ –º–∏–Ω–∏ —è–¥–µ—Ä–∫–∞')

        s3 = '–¶—ñ —Ö–ª–æ–ø—Ü—ñ –ø–µ—Ä—à—ñ –±–µ—Ä—É—Ç—å –Ω–∞ —Å–µ–±–µ —É–¥–∞—Ä'
        self.assertEqual(rutrans.ru_to_cyrillic(s3), "Ts—ñ hlopts—ñ persh—ñ berut' na sebe udar")

    def test_special_characters(self):
        s1 = '–ï—Å–ª–∏ –∏—Ö –Ω–∞—à–∞ –æ—Ç—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è t0‚ÇΩœÄ‚Ç¨–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ —Ä—ã–± –∫–æ—Ä–º–∏—Ç—å'
        self.assertEqual(spec_char.replace_specsymb(s1), 
                        '–ï—Å–ª–∏ –∏—Ö –Ω–∞—à–∞ –æ—Ç—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è t–æ—Ä–ø–µ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ —Ä—ã–± –∫–æ—Ä–º–∏—Ç—å')
        s2 = '–∑–∞–ø—É—Å–∫–∞—î–º —Å–Ωa—Ä—è–¥ –Ω–∞ –ú0—Å–∫–≤—É'
        self.assertEqual(spec_char.replace_specsymb(s2), 
                        '–∑–∞–ø—É—Å–∫–∞—î–º —Å–Ωa—Ä—è–¥ –Ω–∞ –ú–æ—Å–∫–≤—É')
        s3 = '–ë–∞–±–∞–∫–∞–µ—Ç –∫–∞–∫ –º–∏–Ω–∏ —è–¥–µ‚ÇΩ–∫–∞'
        self.assertEqual(spec_char.replace_specsymb(s3), 
                        '–ë–∞–±–∞–∫–∞–µ—Ç –∫–∞–∫ –º–∏–Ω–∏ —è–¥–µ—Ä–∫–∞')


if __name__ == '__main__':
    unittest.main()